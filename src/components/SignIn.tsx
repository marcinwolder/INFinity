import { PasswordInput, TextInput, Notification } from '@mantine/core';
import { useForm, hasLength, isEmail, matches } from '@mantine/form';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';
import { useDisclosure } from '@mantine/hooks';
import { AiOutlineLoading3Quarters } from 'react-icons/ai';
import { modals } from '@mantine/modals';
import { toast } from 'react-hot-toast';

import { firebaseApp } from '../main';
import AnimatedToast from './AnimatedToast';

import InfinitySmallDark from './../img/InfinitySmall-dark.png';
import InfinitySmall from './../img/InfinitySmall.png';
import LightDarkThemeImg from './LightDarkThemeImg';

const SignIn = () => {
	const auth = getAuth(firebaseApp);
	const [disabled, { open: disableBtn, close: enableBtn }] = useDisclosure();

	const formEl = useForm({
		validateInputOnBlur: true,
		initialValues: {
			email: '',
			password: '',
		},
		validate: {
			email: isEmail('NieprawidÅ‚owy email'),
			password: (value) => {
				return (
					hasLength({ min: 8 }, 'HasÅ‚o musi miec min. 8 znakÃ³w.')(value) ||
					matches(
						/[~`!@#$%^&*()_\-+=|\\[{\]};:'",<.>/?]+/g,
						'HasÅ‚o musi zawieraÄ‡ min. 1 znak specjalny.'
					)(value) ||
					matches(/\d+/g, 'HasÅ‚o musi zawieraÄ‡ min. 1 cyfrÄ™.')(value) ||
					matches(
						/[A-Z]+/g,
						'HasÅ‚o musi zawierac min. 1 wielkÄ… literÄ™.'
					)(value) ||
					matches(
						/[a-z]+/g,
						'HasÅ‚o musi zawierac min. 1 maÅ‚Ä… literÄ™.'
					)(value) ||
					null
				);
			},
		},
	});

	const onSubmit = () => {
		if (formEl.isValid()) {
			disableBtn();
			signInWithEmailAndPassword(
				auth,
				formEl.values.email,
				formEl.values.password
			)
				.then(() => {
					modals.close('signInModal');
					toast.custom(
						<AnimatedToast>
							<Notification
								withCloseButton={false}
								withBorder
								color='green'
								radius='md'
								title='ZostaÅ‚eÅ› pomyÅ›lnie zalogowany!'>
								Witamy ponownie ðŸ˜€
							</Notification>
						</AnimatedToast>
					);
				})
				.catch((e) => {
					if (
						e.code === 'auth/user-not-found' ||
						e.code === 'auth/wrong-password'
					)
						toast.custom(
							<AnimatedToast>
								<Notification
									withCloseButton={false}
									withBorder
									color='red'
									title='BÅ‚Ä™dne dane.'>
									SprawdÅº czy wpisane hasÅ‚o oraz email sÄ… poprawne.
								</Notification>
							</AnimatedToast>
						);
					// console.log(e.code);
				})
				.finally(enableBtn);
		} else {
			formEl.validate();
		}
	};

	return (
		<>
			<form
				className='mb-2'
				onKeyDown={(e) => {
					if (e.key === 'Enter') onSubmit();
				}}>
				<TextInput
					disabled={disabled}
					label='Email: '
					placeholder='email@test.pl'
					{...formEl.getInputProps('email')}
				/>
				<PasswordInput
					disabled={disabled}
					label='HasÅ‚o:'
					{...formEl.getInputProps('password')}
				/>
			</form>
			<div className='flex'>
				<div className='w-40 h-20 place-self-end border-dashed overflow-hidden border-base-content border-l-2 border-b-2 rounded-bl-lg '>
					{/* TODO: ANIMATED DRAWING LOGO HERE */}
					<LightDarkThemeImg
						className='h-40 w-48 relative -top-4 -left-8'
						light={InfinitySmall}
						dark={InfinitySmallDark}
					/>
				</div>
				<button
					disabled={disabled}
					className='btn w-28 md:w-36 btn-primary block ml-auto mr-4 mb-4 mt-8'
					onClick={onSubmit}>
					{!disabled ? (
						'Zaloguj'
					) : (
						<div className='flex justify-center'>
							<span className='animate-spin'>
								<AiOutlineLoading3Quarters />
							</span>
						</div>
					)}
				</button>
			</div>
		</>
	);
};

export default SignIn;
